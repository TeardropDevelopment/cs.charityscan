@page "/volunteer"
@using System.Net;
@inject IJSRuntime JS;
@using CharityScanWebApp.Helpers;
@using CharityScanWebApp.Services;
@using Microsoft.JSInterop.Implementation;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using CharityScanWebApp.Entities;
@using System.Text.RegularExpressions;
@inject ProtectedSessionStorage SessionStorage;
@inject NavigationManager uriHelper;
@inject JsHelperService JsHelper;
@inject BarcodeReaderService readerService;

<PageTitle>Volunteering</PageTitle>

<div id="qr-reader" style="width: 100%"></div>

@code {

    // Pass the handler to httpclient(from you are calling api)
    HttpClient client = new HttpClient(new HttpClientHandler()
        {
            ServerCertificateCustomValidationCallback = (sender, cert, chain, sslPolicyErrors) => { return true; }
        })
    {
        BaseAddress = new Uri("https://130.61.142.115/api/v1/")
        //BaseAddress = new Uri("https://192.168.50.5/api/v1/")
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (!firstRender) return;

            await readerService.StartAsync(nameof(QrCodeCallback), this);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    [JSInvokable]
    public async Task QrCodeCallback(string result)
    {

        // TODO: VisualFeedback Sweet BlazorBootstrap

        try
        {
            Console.WriteLine(result);

            if (Regex.Match(result, @"^\d{6}-[A-Z]{2}-\d{4}-\d{4}$").Success)
            {
                await RegisterAsVolunteerAsync(result);
                return;
            }

            await ProcessLapAsync(result);
        }
        catch (Exception)
        {

            throw;
        }
        finally
        {
            await readerService.ResumeAsync();
        }
    }

    public async Task RegisterAsVolunteerAsync(string barcode)
    {
        try
        {
            var s = await client.GetFromJsonAsync<List<EventCode>>("eventcodes?value=" + barcode);

            if (s == null || !s.Any())
                return;

            await SessionStorage.SetAsync("IsVolunteer", true);
            await SessionStorage.SetAsync("VolunteerAtEvent", s.First().EventId);

            await JsHelper.Alert("Registriert bei Event " + s.First().EventId); // Alert

            uriHelper.NavigateTo(uriHelper.Uri, true);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JsHelper.Alert("Dieses Event wurde nicht gefunden!");
        }
    }

    public async Task ProcessLapAsync(string barcode)
    {
        try
        {
            int eventId = (await SessionStorage.GetAsync<int>("VolunteerAtEvent")).Value;

            Console.WriteLine("Scanned lap for event: " + eventId);

            HttpResponseMessage response;

            // To ensure its for the same event. Otherwise treat it as a regular code
            if (barcode.StartsWith(eventId.ToString()) && barcode.EndsWith("-SCAN"))
            {
                // ASK PERSON TO INPUT STARTER NR
                string starterNr = await JsHelper.Prompt("Bitte Starter Nummer eingeben:");

                response = await client.PostAsync($"Laps?event_id={eventId}&value={barcode}&starter_nr={starterNr}", null);

                if (response.IsSuccessStatusCode)
                    return;

                // TODO: Replace with visual feedback
                await JsHelper.Alert("Bitte nochmal probieren!");
                return;
            }

            // add into database
            response = await client.PostAsync($"Laps?event_id={eventId}&value={barcode}", null);

            if (response.IsSuccessStatusCode)
                return;

            await JsHelper.Alert("Bitte nochmal probieren!");
            return;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }

    }
}
